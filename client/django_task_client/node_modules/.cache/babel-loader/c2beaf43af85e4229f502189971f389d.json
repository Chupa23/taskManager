{"ast":null,"code":"import axios from \"axios\";\nexport default {\n  data() {\n    return {\n      stages: [\"ToDo\", \"Doing\", \"Done\"],\n      tasks: [\"\"],\n      title: \"\",\n      description: \"\",\n      stage: \"ToDo\",\n      localTimer: 0,\n      count: false,\n      addTask: false\n    };\n  },\n\n  mounted() {\n    setInterval(() => {\n      if (this.count) {\n        this.localTimer += 1;\n      }\n    }, 1000);\n  },\n\n  methods: {\n    convertTime(seconds) {\n      try {\n        let time = new Date(seconds * 1000).toISOString().substr(11, 8);\n        console.log(typeof time);\n        return time;\n      } catch (error) {\n        console.log(error);\n      }\n    },\n\n    async getData() {\n      try {\n        const response = await axios.get(`http://${location.hostname}:8000/api/taskss/?format=json`);\n        this.tasks = response.data;\n      } catch (error) {\n        console.log(error);\n      }\n    },\n\n    async toggleTimer(task) {\n      try {\n        this.count = !this.count;\n        const response = await axios.put(`http://${location.hostname}:8000/api/taskss/${task.id}/?format=json`, {\n          stage: task.stageToggle,\n          title: task.title,\n          description: task.description,\n          timer: task.timer + this.localTimer,\n          timerState: !task.timerState\n        });\n        this.localTimer = 0;\n        let taskIndex = this.tasks.findIndex(t => t.id === task.id);\n        this.tasks = this.tasks.map(task => {\n          if (this.tasks.findIndex(t => t.id === task.id) === taskIndex) {\n            return response.data;\n          }\n\n          return task;\n        });\n      } catch (error) {\n        console.log(error);\n      }\n    },\n\n    async toggleStage(task, stageToggle) {\n      try {\n        const response = await axios.put(`http://${location.hostname}:8000/api/taskss/${task.id}/?format=json`, {\n          stage: stageToggle,\n          title: task.title,\n          description: task.description\n        });\n        let taskIndex = this.tasks.findIndex(t => t.id === task.id);\n        this.tasks = this.tasks.map(task => {\n          if (this.tasks.findIndex(t => t.id === task.id) === taskIndex) {\n            return response.data;\n          }\n\n          return task;\n        });\n      } catch (error) {\n        console.log(error);\n      }\n    },\n\n    async submitForm() {\n      try {\n        const response = await axios.post(`http://${location.hostname}:8000/api/taskss/?format=json`, {\n          title: this.title,\n          description: this.description,\n          stage: this.stage\n        });\n        this.tasks.push(response.data);\n        this.title = '';\n        this.description = '';\n      } catch (error) {\n        console.log(error);\n      }\n    },\n\n    async deleteTask(task) {\n      let confirmation = confirm(\"Are you sure?\");\n\n      if (confirmation) {\n        try {\n          await axios.delete(`http://${location.hostname}:8000/api/taskss/${task.id}/?format=json`);\n          this.getData();\n        } catch (error) {\n          console.log(error);\n        }\n      }\n    }\n\n  },\n\n  beforeMount() {\n    document.querySelector('body').setAttribute('style', 'background-image:url(\"tourqoise.jpeg\")');\n  },\n\n  beforeUnmout() {\n    document.querySelector('body').setAttribute('style', '');\n  },\n\n  created() {\n    this.getData();\n  }\n\n};","map":{"version":3,"mappings":"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","names":["axios","data","stages","tasks","title","description","stage","localTimer","count","addTask","mounted","setInterval","methods","convertTime","seconds","time","Date","toISOString","substr","console","log","error","getData","response","get","location","hostname","toggleTimer","task","put","id","stageToggle","timer","timerState","taskIndex","findIndex","t","map","toggleStage","submitForm","post","push","deleteTask","confirmation","confirm","delete","beforeMount","document","querySelector","setAttribute","beforeUnmout","created"],"sourceRoot":"","sources":["/home/andrei/djangoWorkspace/APITest/client/django_task_client/src/components/MyTasks.vue"],"sourcesContent":["<template>\n  <div class=\"task_container\">\n    <b-button pill variant=\"dark\" @click=\"this.addTask=!this.addTask\" class=\"addBtn\"> {{addTask ? \"Cancel\":\"Add New Task\"}}</b-button>\n    <div v-if=\"addTask\" class=\"add_task\">\n      <form v-on:submit.prevent=\"submitForm\">\n        <div class=\"form-group\">\n          <label for=\"title\" >Title</label>\n          <input type=\"text\" class=\"form-control\" id=\"title\" v-model=\"title\" />\n        </div>\n        <div class=\"form-group\">\n          <label for=\"description\">Description</label>\n          <textarea\n            class=\"form-control\"\n            id=\"description\"\n            v-model=\"description\"\n          ></textarea>\n        </div>\n        <div class=\"form-group\">\n          <b-button pill variant=\"outline-light\" type=\"submit\">Add Task</b-button>\n        </div>\n      </form>\n    </div>\n    <div class=\"task_content\">\n      <div v-for=\"stage in stages\" :key=\"stage\">\n      <div  class=\"tasks_list\">\n        <p class=\"stage\">{{stage}}</p>\n        <div v-for=\"task in tasks\" :key=\"task.id\">\n          <div v-if=\"task.stage == stage\" v-bind:class=\"stage\">\n          <h2>{{ task.title }}</h2>\n          <p>{{ task.description }}</p>\n          <p v-if=\"task.timerState\" >Now:{{ convertTime(localTimer) }}</p>\n          <p >Total:{{ convertTime(task.timer) }}</p>\n          <b-button pill variant=\"outline-dark\" v-if=\"task.stage=='Doing'\" @click=\"toggleTimer(task)\">\n            {{ count?\"Stop\":\"Start\" }}\n          </b-button>\n          <b-button v-if=\"task.stage!='ToDo'\" pill variant=\"outline-dark\" @click=\"toggleStage(task, 'ToDo')\">\n            To Do\n          </b-button>\n          <b-button v-if=\"task.stage!='Doing'\" pill variant=\"outline-dark\" @click=\"toggleStage(task, 'Doing')\">\n            Doing\n          </b-button>\n          <b-button v-if=\"task.stage!='Done'\" pill variant=\"outline-dark\" @click=\"toggleStage(task,'Done')\">\n            Done\n          </b-button>\n          <b-button pill variant=\"outline-dark\" @click=\"deleteTask(task)\">Delete</b-button>\n          </div>\n        </div>\n      </div>\n      </div>\n    </div>\n  </div>\n</template>\n\n<script>\nimport axios from \"axios\";\nexport default {\n  data() {\n    return {\n      stages: [\"ToDo\", \"Doing\", \"Done\"],\n      tasks: [\"\"],\n      title: \"\",\n      description: \"\",\n      stage: \"ToDo\",\n      localTimer: 0,\n      count: false,\n      addTask: false\n    };\n  },\nmounted () {\n    setInterval(() => {\n      if(this.count){\n      this.localTimer += 1;}\n    }, 1000)\n  },\n  methods: {\n\n     convertTime(seconds){\n      try{\n        let time = new Date(seconds * 1000).toISOString().substr(11, 8);\n        console.log(typeof(time));\n        return time;\n      }\n      catch(error) {\n        console.log(error);\n      }\n    },\n\n    async getData() {\n      try {\n        const response = await axios.get(\n          `http://${location.hostname}:8000/api/taskss/?format=json`\n        );\n        this.tasks = response.data;\n      } catch (error) {\n        console.log(error);\n      }\n    },\n\n    async toggleTimer(task){\n      try{\n        this.count=!this.count;\n          const response = await axios.put(\n          `http://${location.hostname}:8000/api/taskss/${task.id}/?format=json`,\n          {\n            stage: task.stageToggle,\n            title: task.title,\n            description: task.description,\n            timer: task.timer+this.localTimer,\n            timerState: !task.timerState\n\n          });\n          this.localTimer = 0;\n          let taskIndex = this.tasks.findIndex((t) => t.id === task.id);\n\n        this.tasks = this.tasks.map((task) => {\n          if (this.tasks.findIndex((t) => t.id === task.id) === taskIndex) {\n            return response.data;\n          }\n          return task;\n          \n        });\n        }\n        catch (error) {\n        console.log(error);\n    }},\n    async toggleStage(task, stageToggle) {\n      try {\n        const response = await axios.put(\n          `http://${location.hostname}:8000/api/taskss/${task.id}/?format=json`,\n          {\n            stage: stageToggle,\n            title: task.title,\n            description: task.description\n          }\n        );\n\n        let taskIndex = this.tasks.findIndex((t) => t.id === task.id);\n\n        this.tasks = this.tasks.map((task) => {\n          if (this.tasks.findIndex((t) => t.id === task.id) === taskIndex) {\n            return response.data;\n          }\n          return task;\n        });\n      } catch (error) {\n        console.log(error);\n      }\n    },\n\tasync submitForm(){\n\t\ttry{\n\t\t\tconst response = await axios.post(\n\t\t\t`http://${location.hostname}:8000/api/taskss/?format=json`,\n\t\t\t{\n\t\t\t\ttitle: this.title,\n\t\t\t\tdescription: this.description,\n\t\t\t\tstage: this.stage\n\t\t\t}\n\t\t\t);\n\t\t\tthis.tasks.push(response.data);\n\t\t\tthis.title = '';\n\t\t\tthis.description  = '';\n\t\t}\n\t\tcatch(error){\n\t\t\tconsole.log(error);\n\t\t}\n\t}, async deleteTask(task){\n    let confirmation = confirm(\"Are you sure?\");\n    if(confirmation){\n\t\t\ttry{\n\t\t\t\tawait axios.delete(`http://${location.hostname}:8000/api/taskss/${task.id}/?format=json`);\n\t\t\t\tthis.getData();\n\t\t\t}\n\t\t\tcatch(error){\n\t\t\t\tconsole.log(error);\n\t\t\t}\n    }\n\t}\n  },\n  beforeMount () {\n   document.querySelector('body').setAttribute('style', 'background-image:url(\"tourqoise.jpeg\")')\n  },\n  beforeUnmout () {\n    document.querySelector('body').setAttribute('style', '')\n  },\n  created() {\n    this.getData();\n  },\n};\n</script>\n\n<style scoped>\n\n.stage{\n  position: relative;\n  color: White;\n  font-weight: bold;\n  background-color: rgba(116, 255, 243, 0.623);\n  margin: 0px;\n  border-top-left-radius: 20px;\n  border-top-right-radius: 20px;\n  width: 200px;\n  height: 30px;\n  margin-left: 50px;\n  padding-top: 5px;\n}\n\nbutton{\n  margin: 1px;\n  margin-bottom: 5px;\n}\n\nform{\n  \n  position: relative;\n  left: 50%;\n  transform: translate(-50%);\n  margin-bottom: 10px;\n  padding-top: 20px;\n  padding-bottom: 20px;\n  background-color: rgba(44, 44, 44, 0.63);\n  width: 500px;\n  border-radius: 15px;\n  color: white;\n\n}\n.title{\n  position: absolute;\n  top: 0px;\n}\n.task_content{\n  position: absolute;\n  display: flex;\n  left: 50%;\n  margin-top: 30px;\n  transform: translate(-50%);\n}\n\n\n.tasks_list > div > div{\n  position: relative;\n  list-style: none;\n  width: 250px;\n  height: 200px;\n  border-radius: 25px;\n  padding: 10px;\n  padding-bottom: 20px;\n background-color: rgba(116, 255, 243, 0.623); \n  margin-left: 20px;\n}\n\n@media(max-width : 520px){\n  .task_content{\n  position: absolute;\n  display: flex;\n  left: 100%;\n  transform: translate(-50%);\n}\n\n  .addBtn{\n    position:fixed;\n    left:125px;\n    top:30px;\n\n  }\n}\n\n</style>"]},"metadata":{},"sourceType":"module"}