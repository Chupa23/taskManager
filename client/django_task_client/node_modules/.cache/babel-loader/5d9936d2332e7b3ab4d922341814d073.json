{"ast":null,"code":"import axios from \"axios\";\nexport default {\n  data() {\n    return {\n      tasks: [\"\"],\n      title: \"\",\n      description: \"\",\n      stage: \"To Do\",\n      localTimer: 0,\n      count: false\n    };\n  },\n\n  mounted() {\n    setInterval(() => {\n      if (this.count) {\n        this.localTimer += 1;\n      }\n    }, 1000);\n  },\n\n  methods: {\n    async getData() {\n      try {\n        const response = await axios.get(`http://${location.hostname}:8000/api/taskss/?format=json`);\n        this.tasks = response.data;\n      } catch (error) {\n        console.log(error);\n      }\n    },\n\n    async toggleTimer() {\n      this.count = !this.count;\n    },\n\n    async toggleStage(task, stageToggle) {\n      try {\n        const response = await axios.put(`http://${location.hostname}:8000/api/taskss/${task.id}/?format=json`, {\n          stage: stageToggle,\n          title: task.title,\n          description: task.description\n        });\n        let taskIndex = this.tasks.findIndex(t => t.id === task.id);\n        this.tasks = this.tasks.map(task => {\n          if (this.tasks.findIndex(t => t.id === task.id) === taskIndex) {\n            return response.data;\n          }\n\n          return task;\n        });\n      } catch (error) {\n        console.log(error);\n      }\n    },\n\n    async submitForm() {\n      try {\n        const response = await axios.post(`http://${location.hostname}:8000/api/taskss/?format=json`, {\n          title: this.title,\n          description: this.description,\n          stage: this.stage\n        });\n        this.tasks.push(response.data);\n        this.title = '';\n        this.description = '';\n      } catch (error) {\n        console.log(error);\n      }\n    },\n\n    async deleteTask(task) {\n      let confirmation = confirm(\"Are you sure?\");\n\n      if (confirmation) {\n        try {\n          await axios.delete(`http://${location.hostname}:8000/api/taskss/${task.id}/?format=json`);\n          this.getData();\n        } catch (error) {\n          console.log(error);\n        }\n      }\n    }\n\n  },\n\n  created() {\n    this.getData();\n  }\n\n};","map":{"version":3,"mappings":"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","names":["axios","data","tasks","title","description","stage","localTimer","count","mounted","setInterval","methods","getData","response","get","location","hostname","error","console","log","toggleTimer","toggleStage","task","stageToggle","put","id","taskIndex","findIndex","t","map","submitForm","post","push","deleteTask","confirmation","confirm","delete","created"],"sourceRoot":"","sources":["/home/andrei/djangoWorkspace/APITest/client/django_task_client/src/components/MyTasks.vue"],"sourcesContent":["<template>\n  <div class=\"task_container\">\n    <div class=\"add_task\">\n      <form v-on:submit.prevent=\"submitForm\">\n        <div class=\"form-group\">\n          <label for=\"title\">Title</label>\n          <input type=\"text\" class=\"form-control\" id=\"title\" v-model=\"title\" />\n        </div>\n        <div class=\"form-group\">\n          <label for=\"description\">Description</label>\n          <textarea\n            class=\"form-control\"\n            id=\"description\"\n            v-model=\"description\"\n          ></textarea>\n        </div>\n        <div class=\"form-group\">\n          <button type=\"submit\">Add Task</button>\n        </div>\n      </form>\n    </div>\n    <div class=\"task_content\">\n      <h1>Tasks</h1>\n      <ul class=\"tasks_list\">\n        <li v-for=\"task in tasks\" :key=\"task.id\">\n          <h2>{{ task.title }}</h2>\n          <p>{{ task.description }}</p>\n          <p >{{ localTimer }}</p>\n          <button @click=\"toggleTimer()\">\n            {{ task.timerState?\"Stop\":\"Start\" }}\n          </button>\n          <button @click=\"toggleStage(task, 'To Do')\">\n            To Do\n          </button>\n          <button @click=\"toggleStage(task, 'Doing')\">\n            Doing\n          </button>\n          <button @click=\"toggleStage(task,'Done')\">\n            Done\n          </button>\n          <button @click=\"deleteTask(task)\">Delete</button>\n        </li>\n      </ul>\n    </div>\n  </div>\n</template>\n\n<script>\nimport axios from \"axios\";\nexport default {\n  data() {\n    return {\n      tasks: [\"\"],\n      title: \"\",\n      description: \"\",\n      stage: \"To Do\",\n      localTimer: 0,\n      count: false\n    };\n  },\nmounted () {\n\n    setInterval(() => {\n      if(this.count){\n      this.localTimer += 1;}\n    }, 1000)\n  },\n  methods: {\n    async getData() {\n      try {\n        const response = await axios.get(\n          `http://${location.hostname}:8000/api/taskss/?format=json`\n        );\n        this.tasks = response.data;\n      } catch (error) {\n        console.log(error);\n      }\n    },\n\n    async toggleTimer(){\n\n        this.count=!this.count;\n      \n    },\n    async toggleStage(task, stageToggle) {\n      try {\n        const response = await axios.put(\n          `http://${location.hostname}:8000/api/taskss/${task.id}/?format=json`,\n          {\n            stage: stageToggle,\n            title: task.title,\n            description: task.description,\n          }\n        );\n\n        let taskIndex = this.tasks.findIndex((t) => t.id === task.id);\n\n        this.tasks = this.tasks.map((task) => {\n          if (this.tasks.findIndex((t) => t.id === task.id) === taskIndex) {\n            return response.data;\n          }\n          return task;\n        });\n      } catch (error) {\n        console.log(error);\n      }\n    },\n\tasync submitForm(){\n\t\ttry{\n\t\t\tconst response = await axios.post(\n\t\t\t`http://${location.hostname}:8000/api/taskss/?format=json`,\n\t\t\t{\n\t\t\t\ttitle: this.title,\n\t\t\t\tdescription: this.description,\n\t\t\t\tstage: this.stage\n\t\t\t}\n\t\t\t);\n\t\t\tthis.tasks.push(response.data);\n\t\t\tthis.title = '';\n\t\t\tthis.description  = '';\n\t\t}\n\t\tcatch(error){\n\t\t\tconsole.log(error);\n\t\t}\n\t}, async deleteTask(task){\n    let confirmation = confirm(\"Are you sure?\");\n    if(confirmation){\n\t\t\ttry{\n\t\t\t\tawait axios.delete(`http://${location.hostname}:8000/api/taskss/${task.id}/?format=json`);\n\t\t\t\tthis.getData();\n\t\t\t}\n\t\t\tcatch(error){\n\t\t\t\tconsole.log(error);\n\t\t\t}\n    }\n\t}\n  },\n\n  created() {\n    this.getData();\n  },\n};\n</script>\n\n<style scoped>\n\n\t\n</style>"]},"metadata":{},"sourceType":"module"}