{"ast":null,"code":"import axios from \"axios\";\nexport default {\n  data() {\n    return {\n      tasks: [\"\"],\n      title: \"\",\n      description: \"\",\n      stage: \"To Do\",\n      localTimer: 0\n    };\n  },\n\n  mounted() {\n    setInterval(() => {\n      this.localTimer += 1;\n    }, 1000);\n  },\n\n  methods: {\n    async getData() {\n      try {\n        const response = await axios.get(`http://${location.hostname}:8000/api/taskss/?format=json`);\n        this.tasks = response.data;\n      } catch (error) {\n        console.log(error);\n      }\n    },\n\n    async toggleTimer(task) {\n      try {\n        const response = await axios.put(`http://${location.hostname}:8000/api/taskss/${task.id}/?format=json`, {\n          stage: task.stage,\n          title: task.title,\n          description: task.description,\n          timerState: !task.timerState\n        });\n        let taskIndex = this.tasks.findIndex(t => t.id === task.id);\n        this.tasks = this.tasks.map(task => {\n          if (this.tasks.findIndex(t => t.id === task.id) === taskIndex) {\n            return response.data;\n          }\n\n          return task;\n        });\n      } catch (error) {\n        console.log(error);\n      }\n    },\n\n    async toggleStage(task, stageToggle) {\n      try {\n        const response = await axios.put(`http://${location.hostname}:8000/api/taskss/${task.id}/?format=json`, {\n          stage: stageToggle,\n          title: task.title,\n          description: task.description\n        });\n        let taskIndex = this.tasks.findIndex(t => t.id === task.id);\n        this.tasks = this.tasks.map(task => {\n          if (this.tasks.findIndex(t => t.id === task.id) === taskIndex) {\n            return response.data;\n          }\n\n          return task;\n        });\n      } catch (error) {\n        console.log(error);\n      }\n    },\n\n    async submitForm() {\n      try {\n        const response = await axios.post(`http://${location.hostname}:8000/api/taskss/?format=json`, {\n          title: this.title,\n          description: this.description,\n          stage: this.stage\n        });\n        this.tasks.push(response.data);\n        this.title = '';\n        this.description = '';\n      } catch (error) {\n        console.log(error);\n      }\n    },\n\n    async deleteTask(task) {\n      let confirmation = confirm(\"Are you sure?\");\n\n      if (confirmation) {\n        try {\n          await axios.delete(`http://${location.hostname}:8000/api/taskss/${task.id}/?format=json`);\n          this.getData();\n        } catch (error) {\n          console.log(error);\n        }\n      }\n    }\n\n  },\n\n  created() {\n    this.getData();\n  }\n\n};","map":{"version":3,"mappings":"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","names":["axios","data","tasks","title","description","stage","localTimer","mounted","setInterval","methods","getData","response","get","location","hostname","error","console","log","toggleTimer","task","put","id","timerState","taskIndex","findIndex","t","map","toggleStage","stageToggle","submitForm","post","push","deleteTask","confirmation","confirm","delete","created"],"sourceRoot":"","sources":["/home/andrei/djangoWorkspace/APITest/client/django_task_client/src/components/MyTasks.vue"],"sourcesContent":["<template>\n  <div class=\"task_container\">\n    <div class=\"add_task\">\n      <form v-on:submit.prevent=\"submitForm\">\n        <div class=\"form-group\">\n          <label for=\"title\">Title</label>\n          <input type=\"text\" class=\"form-control\" id=\"title\" v-model=\"title\" />\n        </div>\n        <div class=\"form-group\">\n          <label for=\"description\">Description</label>\n          <textarea\n            class=\"form-control\"\n            id=\"description\"\n            v-model=\"description\"\n          ></textarea>\n        </div>\n        <div class=\"form-group\">\n          <button type=\"submit\">Add Task</button>\n        </div>\n      </form>\n    </div>\n    <div class=\"task_content\">\n      <h1>Tasks</h1>\n      <ul class=\"tasks_list\">\n        <li v-for=\"task in tasks\" :key=\"task.id\">\n          <h2>{{ task.title }}</h2>\n          <p>{{ task.description }}</p>\n          <p >{{ localTimer }}</p>\n          <button @click=\"toggleTimer(task)\">\n            {{ task.timerState?\"Stop\":\"Start\" }}\n          </button>\n          <button @click=\"toggleStage(task, 'To Do')\">\n            To Do\n          </button>\n          <button @click=\"toggleStage(task, 'Doing')\">\n            Doing\n          </button>\n          <button @click=\"toggleStage(task,'Done')\">\n            Done\n          </button>\n          <button @click=\"deleteTask(task)\">Delete</button>\n        </li>\n      </ul>\n    </div>\n  </div>\n</template>\n\n<script>\nimport axios from \"axios\";\nexport default {\n  data() {\n    return {\n      tasks: [\"\"],\n      title: \"\",\n      description: \"\",\n      stage: \"To Do\",\n      localTimer: 0\n    };\n  },\nmounted () {\n    setInterval(() => {\n      this.localTimer += 1\n    }, 1000)\n  },\n  methods: {\n    async getData() {\n      try {\n        const response = await axios.get(\n          `http://${location.hostname}:8000/api/taskss/?format=json`\n        );\n        this.tasks = response.data;\n      } catch (error) {\n        console.log(error);\n      }\n    },\n\n    async toggleTimer(task){\n          try {\n        const response = await axios.put(\n          `http://${location.hostname}:8000/api/taskss/${task.id}/?format=json`,\n          {\n            stage: task.stage,\n            title: task.title,\n            description: task.description,\n            timerState: !task.timerState\n          }\n        );\n\n        let taskIndex = this.tasks.findIndex((t) => t.id === task.id);\n\n        this.tasks = this.tasks.map((task) => {\n          if (this.tasks.findIndex((t) => t.id === task.id) === taskIndex) {\n            return response.data;\n          }\n          return task;\n        });\n      } catch (error) {\n        console.log(error);\n      }\n    },\n    async toggleStage(task, stageToggle) {\n      try {\n        const response = await axios.put(\n          `http://${location.hostname}:8000/api/taskss/${task.id}/?format=json`,\n          {\n            stage: stageToggle,\n            title: task.title,\n            description: task.description,\n          }\n        );\n\n        let taskIndex = this.tasks.findIndex((t) => t.id === task.id);\n\n        this.tasks = this.tasks.map((task) => {\n          if (this.tasks.findIndex((t) => t.id === task.id) === taskIndex) {\n            return response.data;\n          }\n          return task;\n        });\n      } catch (error) {\n        console.log(error);\n      }\n    },\n\tasync submitForm(){\n\t\ttry{\n\t\t\tconst response = await axios.post(\n\t\t\t`http://${location.hostname}:8000/api/taskss/?format=json`,\n\t\t\t{\n\t\t\t\ttitle: this.title,\n\t\t\t\tdescription: this.description,\n\t\t\t\tstage: this.stage\n\t\t\t}\n\t\t\t);\n\t\t\tthis.tasks.push(response.data);\n\t\t\tthis.title = '';\n\t\t\tthis.description  = '';\n\t\t}\n\t\tcatch(error){\n\t\t\tconsole.log(error);\n\t\t}\n\t}, async deleteTask(task){\n    let confirmation = confirm(\"Are you sure?\");\n    if(confirmation){\n\t\t\ttry{\n\t\t\t\tawait axios.delete(`http://${location.hostname}:8000/api/taskss/${task.id}/?format=json`);\n\t\t\t\tthis.getData();\n\t\t\t}\n\t\t\tcatch(error){\n\t\t\t\tconsole.log(error);\n\t\t\t}\n    }\n\t}\n  },\n\n  created() {\n    this.getData();\n  },\n};\n</script>\n\n<style scoped>\n\n\t\n</style>"]},"metadata":{},"sourceType":"module"}